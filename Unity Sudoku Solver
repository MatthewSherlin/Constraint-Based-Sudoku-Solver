using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class SudokuSolver : MonoBehaviour
{
    private int[,] SudokuGrid;
    private List<int[,]> GridList;
    private GameObject[,] SudokuVisualGrid;
    [SerializeField] private GameObject TilePrefab;
    [SerializeField] private RectTransform ParentPanel;


    private void Awake()
    {
        GridList = new List<int[,]>();
        SudokuGrid = new int[9, 9];
        // Grid 0
        GridList.Add(
            new int[,] {
                { 0, 0, 0, 2, 6, 0, 7, 0, 1 },
                { 6, 8, 0, 0, 7, 0, 0, 9, 0 },
                { 1, 9, 0, 0, 0, 4, 5, 0, 0 },
                { 8, 2, 0, 1, 0, 0, 0, 4, 0 },
                { 0, 0, 4, 6, 0, 2, 9, 0, 0 },
                { 0, 5, 0, 0, 0, 3, 0, 2, 8 },
                { 0, 0, 9, 3, 0, 0, 0, 7, 4 },
                { 0, 4, 0, 0, 5, 0, 0, 3, 6 },
                { 7, 0, 3, 0, 1, 8, 0, 0, 0 }
            }
        );
        // Grid 1
        GridList.Add(
            new int[,] {
                { 0, 0, 8, 0, 0, 7, 0, 5, 0 },
                { 9, 0, 0, 0, 0, 4, 0, 0, 0 },
                { 5, 0, 0, 0, 9, 0, 0, 0, 0 },
                { 0, 0, 4, 0, 0, 1, 0, 6, 8 },
                { 0, 9, 0, 0, 3, 0, 0, 7, 0 },
                { 3, 8, 0, 7, 0, 0, 9, 0, 0 },
                { 0, 0, 0, 0, 7, 0, 0, 0, 4 },
                { 0, 0, 0, 4, 0, 0, 0, 0, 2 },
                { 0, 3, 0, 8, 0, 0, 5, 0, 0 }
            }
        );
        // Grid 2
        GridList.Add(
            new int[,] {
                { 0, 0, 0, 7, 4, 8, 0, 6, 5 },
                { 0, 0, 6, 0, 0, 0, 9, 0, 3 },
                { 0, 0, 0, 0, 0, 0, 8, 0, 0 },
                { 0, 4, 0, 0, 8, 0, 0, 1, 0 },
                { 8, 1, 0, 2, 0, 6, 0, 9, 7 },
                { 0, 9, 0, 0, 3, 0, 0, 5, 0 },
                { 0, 0, 2, 0, 0, 0, 0, 0, 0 },
                { 7, 0, 8, 0, 0, 0, 6, 0, 0 },
                { 9, 5, 0, 6, 1, 3, 0, 0, 0 }
            }
        );
        //GridList.Add(
        //    new int[,] {
        //        { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        //        { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        //        { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        //        { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        //        { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        //        { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        //        { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        //        { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        //        { 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        //    }
        //);


    }


    void Start()
    {
        Random.seed = 42;

        NewGrid();
    }

    public void NewGrid()
    {
        int randomNum = Random.Range(0, GridList.Count);
        Debug.Log("Grid: " + randomNum);
        for (int x = 0; x < 9; ++x)
        {
            for (int y = 0; y < 9; ++y)
            {
                SudokuGrid[x, y] = GridList[randomNum][x,y]; 
            }
        }
        VisualGrid(SudokuGrid);
    }

    public void VisualGrid(int[,] board)
    {
        if (SudokuVisualGrid != null)
        {
            foreach (GameObject Tile in SudokuVisualGrid)
            {
                Destroy(Tile);
            }
        }

        SudokuVisualGrid = new GameObject[9, 9];
        for (int x = 0; x < 9; ++x)
        {
            for (int y = 0; y < 9; ++y)
            {
                SudokuVisualGrid[x, y] = Instantiate(TilePrefab, new Vector3(x, y), Quaternion.identity);
                SudokuVisualGrid[x, y].transform.SetParent(ParentPanel, false);
                SudokuVisualGrid[x, y].name = $"Tile {x} {y}";
                TextMeshProUGUI buttonText = SudokuVisualGrid[x, y].GetComponentInChildren<TextMeshProUGUI>();
                if (board[x, y] == 0)
                {
                    buttonText.text = " ";
                }
                else
                {
                    buttonText.text = board[x, y].ToString();
                }
            }
        }
    }

    public void SolveGrid()
    {
        Debug.Log(SudokuGrid);
        if (SudokuGrid == null)
        {
            Debug.Log("null grid");
        }
        else
        {
            if (SolveSudoku(SudokuGrid, 0, 0))
            {
                Debug.Log("Sudoku Board Completed.");
                VisualGrid(SudokuGrid);
            }
            // if SolveSudoku returns false
            else Debug.Log("Sudoku can not be solved.");
        }
    }


    //////////////////////////////////////////////////////////
    //main solving driver with backtracking
    public static bool SolveSudoku(int[,] sudoku, int row, int col)
    {
        bool filled = true;
        // checking for each index if it is 0
        for (int i = 0; i < 9; i++)
        {
            for (int j = 0; j < 9; j++)
            {
                //if index is 0, then set row and column to that index and filled is false
                if (sudoku[i, j] == 0)
                {
                    row = i; col = j;
                    filled = false;
                    break;
                }
            }
            if (!filled) break;
        }
        // if there are no empty spaces left, then return true
        if (filled) return true;
        //size of rows and columns
        for (int i = 1; i <= 9; i++)
        {
            //if constraints pass, index is equal to number in for loop
            if (RowConstraint(sudoku, row, i) && ColConstraint(sudoku, col, i) && SubSquareConstraint(sudoku, row, col, i))
            {
                //if constraints pass, then number added to index
                sudoku[row, col] = i;
                if (SolveSudoku(sudoku, row, col)) return true;
                //if constraints don't pass, set index to 0 and go again with new number.
                else sudoku[row, col] = 0;
            }
        }
        //if returns false, unable to solve sudoku board
        return false;
    }

    ////////////////////////////////////////////////////////////////////////////
    //contraints
    public static bool RowConstraint(int[,] sudoku, int row, int number)
    {
        //for length of row, check each index for number
        for (int i = 0; i <= 8; ++i)
        {
            if (number == sudoku[row, i]) return false;
        }
        return true;
    }

    public static bool ColConstraint(int[,] sudoku, int column, int number)
    {
        //for length of row, check each index for number
        for (int i = 0; i <= 8; ++i)
        {
            if (number == sudoku[i, column]) return false;
        }
        return true;
    }

  
    public static bool SubSquareConstraint(int[,] sudoku, int row, int column, int num)
    {
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                if (num == sudoku[i + (row - row % 3), j + (column - column % 3)]) return false;
            }
        }
        return true;
    }

}

